#if !defined(_WGNSDS235_)
#  define _WGNSDS235_

class model_data : public ad_comm{
  data_int nobs;
  data_number maxB;
  data_matrix data;
  dvector landings;
  dvector biomass;
  int iter;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number lnK;
  param_init_number lnMSY;
  param_init_bounded_number n;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_number z;
  param_number zMSY;
  param_number meanP;
  param_number sig;
  param_number K;
  param_number MSY;
  param_number SSQ;
  param_number BMSY;
  param_number FMSY;
  param_vector epsilon;
  param_vector Ppred;
  param_vector Pobs;
  param_stddev_number sd_sig;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void init_states(void);
  void calc_residuals(void);
  void calc_ref_points(void);
  void calc_obj_fun(void);
  void mcmc_stuff(void);

};
#endif
